/*
 *  BEGIN_COPYRIGHT
 *
 *  Copyright (C) 2011-2013 deCODE genetics Inc.
 *  Copyright (C) 2013-2019 WuXi NextCode Inc.
 *  All Rights Reserved.
 *
 *  GORpipe is free software: you can redistribute it and/or modify
 *  it under the terms of the AFFERO GNU General Public License as published by
 *  the Free Software Foundation.
 *
 *  GORpipe is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
 *  INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
 *  NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
 *  the AFFERO GNU General Public License for the complete license terms.
 *
 *  You should have received a copy of the AFFERO GNU General Public License
 *  along with GORpipe.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
 *
 *  END_COPYRIGHT
 */

package gorsat.Utilities

import gorsat.Commands.CommandParseUtilities
import gorsat.Script.ScriptParsers
import gorsat.process
import gorsat.process.{GenericSessionFactory, GorInputSources, GorPipeCommands}
import org.gorpipe.gor.session.GorSession
import org.gorpipe.test.utils.FileTestUtils
import org.junit.runner.RunWith
import org.scalatest.junit.JUnitRunner
import org.scalatest.{BeforeAndAfterAll, FunSuite}

@RunWith(classOf[JUnitRunner])
class UTestGorPrePipe extends FunSuite with BeforeAndAfterAll {

  protected var ymlPnsTxtPath = ""
  protected var rsID1 = "rs544101329"
  protected var rsID2 = "rs28970552"

  override protected def beforeAll(): Unit = {
    GorPipeCommands.register()
    GorInputSources.register()
    var tempDirectory = FileTestUtils.createTempDirectory(this.getClass.getName)
    var ymlPnsTxt = FileTestUtils.createTempFile(tempDirectory, "rsIDsFile.txt",
      rsID1 + "\n" +
        rsID2)
    ymlPnsTxtPath = ymlPnsTxt.getCanonicalPath
  }

  val session: GorSession = new GenericSessionFactory().create()

  test("Get used file from gor query") {
    val query = "gor ../tests/data/gor/dbsnp_test.gorz | group 100 -fc pos -count | top 10"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 1)
    assert(result.head == "../tests/data/gor/dbsnp_test.gorz")
  }

  test("Get used file from gor nested query") {
    val query = "gor <(../tests/data/gor/dbsnp_test.gorz | group 100 -fc pos -count | top 10)"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 1)
    assert(result.head == "../tests/data/gor/dbsnp_test.gorz")
  }

  test("Get used file from a dictionary with -f option") {
    val query = "gor source/var/wgs_varcalls.gord -s PN -f 'IO_GIAB_MOTHER'|where GL_Call >= 5 and (Depth >= 8 or Depth = -1 or Depth = 9999) and ((CallCopies = 2 and CallRatio >= 0.66) or (CallCopies = 1 and CallRatio >= 0.2 and CallRatio <= 1.0-0.2))|select 1-4,callCopies,Callratio,Depth|calc sumAD = CallRatio*Depth|replace sumAD round(sumAD)|replace Depth round(Depth)|calc ratio_breakdown sumAD+'/'+Depth|calc proband_call Call+' (ref='+Reference+')'|calc hetORhom if(CallCopies=2,'hom',if(CallCopies=1,'het',''))"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 1)
    assert(result.head == "#gordict#source/var/wgs_varcalls.gord#gortags#IO_GIAB_MOTHER")
  }

  test("Get used file from a dictionary with -ff option") {
    val query = "gor source/var/wgs_varcalls.gord -s PN -ff " + ymlPnsTxtPath + "|where GL_Call >= 5 and (Depth >= 8 or Depth = -1 or Depth = 9999) and ((CallCopies = 2 and CallRatio >= 0.66) or (CallCopies = 1 and CallRatio >= 0.2 and CallRatio <= 1.0-0.2))|select 1-4,callCopies,Callratio,Depth|calc sumAD = CallRatio*Depth|replace sumAD round(sumAD)|replace Depth round(Depth)|calc ratio_breakdown sumAD+'/'+Depth|calc proband_call Call+' (ref='+Reference+')'|calc hetORhom if(CallCopies=2,'hom',if(CallCopies=1,'het',''))"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 1)
    assert(result.head == "#gordict#source/var/wgs_varcalls.gord#gortags#" + rsID1 + "," + rsID2)
  }

  test("Get used file from nor query") {
    val query = "nor ../tests/data/gor/dbsnp_test.gorz | top 10"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 1)
    assert(result.head == "../tests/data/gor/dbsnp_test.gorz")
  }

  test("Get used file from gor query with join") {
    val query = "nor ../tests/data/gor/dbsnp_test.gorz | join -snpsnp multicolumns.gor"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 2)
    assert(result(1) == "../tests/data/gor/dbsnp_test.gorz")
    assert(result.head == "multicolumns.gor")
  }

  test("Get used file from gor query with join which has a nested source") {
    val query = "nor ../tests/data/gor/dbsnp_test.gorz | join -snpsnp <(gor multicolumns.gor | top 10)"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 2)
    assert(result(1) == "../tests/data/gor/dbsnp_test.gorz")
    assert(result.head == "multicolumns.gor")
  }

  test("Get used file from gor query with map") {
    val query = "nor ../tests/data/gor/dbsnp_test.gorz |map -c foo multicolumns.gor"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 2)
    assert(result(1) == "../tests/data/gor/dbsnp_test.gorz")
    assert(result.head == "multicolumns.gor")
  }

  test("Get used file from gor query with map which has a nested source") {
    val query = "nor ../tests/data/gor/dbsnp_test.gorz | map -c foo  <(nor multicolumns.gor | top 10)"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 2)
    assert(result(1) == "../tests/data/gor/dbsnp_test.gorz")
    assert(result.head == "multicolumns.gor")
  }

  test("Get used file from gor query with multimap") {
    val query = "nor ../tests/data/gor/dbsnp_test.gorz | multimap -c foo multicolumns.gor"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 2)
    assert(result(1) == "../tests/data/gor/dbsnp_test.gorz")
    assert(result.head == "multicolumns.gor")
  }

  test("Get used file from gor query with multimap which has a nested source") {
    val query = "nor ../tests/data/gor/dbsnp_test.gorz | multimap -c foo  <(nor multicolumns.gor | top 10)"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 2)
    assert(result(1) == "../tests/data/gor/dbsnp_test.gorz")
    assert(result.head == "multicolumns.gor")
  }

  test("Get used files from gor query with multiple source based steps") {
    val query = "nor ../tests/data/gor/dbsnp_test.gorz | multimap -c foo 1.gor | map -c foo 2.gor | inset -c foo 3.gor | merge 4.gor | varjoin 5.gor | join 6.gor"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 7)
    assert(result.head == "6.gor")
    assert(result(1) == "5.gor")
    assert(result(2) == "4.gor")
    assert(result(3) == "3.gor")
    assert(result(4) == "2.gor")
    assert(result(5) == "1.gor")
    assert(result(6) == "../tests/data/gor/dbsnp_test.gorz")
  }

  test("Get used files from gor script") {
    val query = "create ##dummy## = gor ##genes## | top 1; \n \n def ##ref## = ref; \n def ##genes## = ##ref##/ensgenes/genes.gorz; \n def ##freqMax## = ##ref##/variants/freq_max.gorz; \n def ##dbnsfpmax## = ##ref##/variants/dbnsfp_max.gorz; \n def ##dbsnp## = ##ref##/variants/dbsnp.gorz; \n def ##gmap## = ##ref##/ensgenes/ensgenes.map; \n \n create ##gene_cov_and_cand_info## = gorrow chr1,10039,10039 \n | calc Reference 'A' \n | calc Call 'C' \n | calc gene_symbol 'APOE' \n | hide #3 \n | rename #2 Pos \n | join -varseg -l -f 10 -r -rprefix GENE -xl gene_symbol -xr gene_symbol <(gor source/cov/gene_cov_coding_seg.gord -s PN -f 'IO_GIAB_MOTHER' | map -c gene_symbol ##gmap## -n gene_aliases -m 'missing' | split gene_aliases | replace gene_symbol if(gene_aliases != 'missing',gene_aliases,gene_symbol) | hide gene_aliases) \n | calc gene_cov if(isfloat(gene_lt5),'L:'+form(gene_lt5,4,2)+'M:'+form((gene_lt10-gene_lt5),4,2)+'H:'+form((1-gene_lt10),4,2),'NaN') | select 1-4,gene_cov; \n \n gorrow chr1,10039,10039 \n | calc Reference 'A' \n | calc Call 'C' \n | calc gene_symbol 'APOE' \n | hide #3 \n | rename #2 Pos \n | varjoin -l -r -e '0.0' <(gor ##freqMax## | select 1-4,max_af | distinct | replace max_af form(max_af,5,5)) \n | varjoin -l -r -e 'NaN' <(gor ##dbnsfpmax## | calc Max_Score max(max(if(isfloat(Polyphen2_HDIV_score),Polyphen2_HDIV_score,0),if(isfloat(Polyphen2_HVAR_score),Polyphen2_HVAR_score,0)),if(isfloat(Sift_score),Sift_score,0)) | group 1 -gc #3,#4 -max -fc max_score | rename max_max_score Max_Score) \n | varjoin -l -r -e 'NaN' <(gor ##dbsnp##) \n \n | varjoin -l -r -e 'NaN' <(gor #wgsVars# -f 'IO_GIAB_MOTHER' \n | where GL_Call >= 5 and (Depth >= 8 or Depth = -1 or Depth = 9999) and ((CallCopies = 2 and CallRatio >= 0.66) or (CallCopies = 1 and CallRatio >= 0.2 and CallRatio <= 1.0-0.2))\n | select 1-4,callCopies,Callratio,Depth \n | calc sumAD = CallRatio*Depth \n | replace sumAD round(sumAD) \n | replace Depth round(Depth) \n | calc ratio_breakdown sumAD+'/'+Depth \n | calc proband_call Call+' (ref='+Reference+')' \n | calc hetORhom if(CallCopies=2,'hom',if(CallCopies=1,'het',''))\n \n | calc varType if(len(reference)=len(call),'sub',if(len(call)<len(reference) and substr(reference,0,len(call)) = call,'del',if(len(call)>len(reference) and substr(call,0,len(reference)) = reference,'ins','indel') )) \n | calc hetORhom_type if(hetORhom != 'NaN',hetORhom+'_','')+varType | hide sumAD,Depth,Callcopies,hetOrhom,varType) \n | varjoin -l -r -xr gene_symbol -xl gene_symbol -e 'NaN' <(gor source/anno/vep_v85/vep_single_wgs.gord | select 1-4,gene_symbol,max_impact,max_consequence) \n | hide gene_symbolx | varjoin -l -r -e 'NaN' <(gor [##gene_cov_and_cand_info##])\n"
    var commands = CommandParseUtilities.quoteSafeSplit(query.replace('\n', ' '), ';')
    val aliases = MacroUtilities.extractAliases(commands)
    commands = MacroUtilities.applyAliases(commands, aliases)
    val session = this.session
    var files = List.empty[String]

    commands.foreach { x =>
      val (a, b) = ScriptParsers.createParser(x)
      if (a.nonEmpty)
        files :::= process.GorPrePipe.getUsedFiles(b, session)
      else
        files :::= process.GorPrePipe.getUsedFiles(x, session)
    }

    assert(files.length == 9)
    assert(files.head == "[##gene_cov_and_cand_info##]")
    assert(files(7) == "#gordict#source/cov/gene_cov_coding_seg.gord#gortags#IO_GIAB_MOTHER")
    assert(files(8) == "ref/ensgenes/genes.gorz")
  }

  test("Get used file from gor dictionary query") {
    val query = "gor ../tests/data/tmp.gord -f 'foo','bar'"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 1)
    assert(result.head == "#gordict#../tests/data/tmp.gord#gortags#foo,bar")
  }

  test("Get used file from nor dictionary query") {
    val query = "nor ../tests/data/tmp.nord -f 'foo','bar'"
    val result = process.GorPrePipe.getUsedFiles(query, session)

    assert(result.length == 1)
    assert(result.head == "#gordict#../tests/data/tmp.nord#gortags#foo,bar")
  }

  test("Huge filter of gor dictionary") {
    val query = "gor UKBB/genotype_array/array.gord -nf -f| top 10 | calc x listsize
    val result = process.GorPrePipe.getUsedFiles(query, session)
    assert(result.length == 1)
    assert(result.head == "#gordict#UKBB/genotype_array/array.gord#gortags
  }
}